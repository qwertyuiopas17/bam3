from flask import Flask
from flask_socketio import SocketIO, emit
import os
import random

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

# Professional fallback responses for immediate use
fallback_responses = {
    'en': {
        'low': [
            "I understand you're going through a difficult time. How can I support you today?",
            "Thank you for reaching out. What's been on your mind lately?",
            "I'm here to listen. Can you tell me more about what you're experiencing?",
            "It's completely normal to have these feelings. What would be most helpful right now?"
        ],
        'moderate': [
            "I can see you're dealing with some challenging emotions. Have you been able to talk to anyone about this?",
            "These feelings sound overwhelming. Would you like to discuss some coping strategies?",
            "You're being brave by reaching out. Have you considered speaking with a counselor?",
            "It sounds like you're carrying a heavy burden. How long have you been feeling this way?"
        ],
        'high': [
            "I'm very concerned about what you're sharing. Please consider reaching out to a crisis helpline: National Suicide Prevention Lifeline 988.",
            "These thoughts are serious and you don't have to go through this alone. Please contact emergency services or call 988.",
            "I'm worried about your safety. Please reach out for immediate help: call 988 or go to your nearest emergency room.",
            "Your life has value. Please don't wait - contact the National Suicide Prevention Lifeline at 988 immediately."
        ]
    },
    'hi': {
        'low': [
            "рдореИрдВ рд╕рдордЭ рд╕рдХрддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдк рдХрдард┐рди рд╕рдордп рд╕реЗ рдЧреБрдЬрд░ рд░рд╣реЗ рд╣реИрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
            "рдореЗрд░реЗ рдкрд╛рд╕ рдЖрдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ?",
            "рдореИрдВ рдпрд╣рд╛рдБ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдБред рдХреНрдпрд╛ рдЖрдк рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдк рдХреНрдпрд╛ рдЕрдиреБрднрд╡ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
            "рдЗрд╕ рддрд░рд╣ рдХреА рднрд╛рд╡рдирд╛рдПрдВ рд╣реЛрдирд╛ рд╕рд╛рдорд╛рдиреНрдп рд╣реИред рдЕрднреА рд╕рдмрд╕реЗ рдорджрджрдЧрд╛рд░ рдХреНрдпрд╛ рд╣реЛрдЧрд╛?"
        ],
        'moderate': [
            "рдореИрдВ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдк рдЪреБрдиреМрддреАрдкреВрд░реНрдг рднрд╛рд╡рдирд╛рдУрдВ рд╕реЗ рдирд┐рдкрдЯ рд░рд╣реЗ рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╕реЗ рдЗрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрд╛рдд рдХрд░ рдкрд╛рдП рд╣реИрдВ?",
            "рдпреЗ рднрд╛рд╡рдирд╛рдПрдВ рдмрд╣реБрдд рднрд╛рд░реА рд▓рдЧрддреА рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдХреБрдЫ рдореБрдХрд╛рдмрд▓рд╛ рд░рдгрдиреАрддрд┐рдпреЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
            "рдорджрдж рдорд╛рдВрдЧрдХрд░ рдЖрдк рд╕рд╛рд╣рд╕ рджрд┐рдЦрд╛ рд░рд╣реЗ рд╣реИрдВред рдХреНрдпрд╛ рдЖрдкрдиреЗ рдХрд┐рд╕реА рдкрд░рд╛рдорд░реНрд╢рджрд╛рддрд╛ рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд┐рдпрд╛ рд╣реИ?",
            "рд▓рдЧрддрд╛ рд╣реИ рдЖрдк рдкрд░ рднрд╛рд░реА рдмреЛрдЭ рд╣реИред рдЖрдк рдХрдм рд╕реЗ рдРрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?"
        ],
        'high': [
            "рдЖрдкрдиреЗ рдЬреЛ рд╕рд╛рдЭрд╛ рдХрд┐рдпрд╛ рд╣реИ рдЙрд╕рд╕реЗ рдореИрдВ рдмрд╣реБрдд рдЪрд┐рдВрддрд┐рдд рд╣реВрдБред рдХреГрдкрдпрд╛ рд╕рдВрдХрдЯ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ: 112ред",
            "рдпреЗ рд╡рд┐рдЪрд╛рд░ рдЧрдВрднреАрд░ рд╣реИрдВ рдФрд░ рдЖрдкрдХреЛ рдЕрдХреЗрд▓реЗ рдЗрд╕рд╕реЗ рдирд╣реАрдВ рдЧреБрдЬрд░рдирд╛ рд╣реЛрдЧрд╛ред рдХреГрдкрдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ рдпрд╛ 112 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред",
            "рдореБрдЭреЗ рдЖрдкрдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХреА рдЪрд┐рдВрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдорджрдж рд▓реЗрдВ: 112 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ рдпрд╛ рдЕрдкрдиреЗ рдирд┐рдХрдЯрддрдо рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрдХреНрд╖ рдореЗрдВ рдЬрд╛рдПрдВред",
            "рдЖрдкрдХрд╛ рдЬреАрд╡рди рдореВрд▓реНрдпрд╡рд╛рди рд╣реИред рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рди рдХрд░реЗрдВ - рддреБрд░рдВрдд рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЖрддреНрдорд╣рддреНрдпрд╛ рд░реЛрдХрдерд╛рдо рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди 112 рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
        ]
    }
}

def assess_crisis_level(text):
    """Simple crisis assessment"""
    text_lower = text.lower()
    
    high_risk = ['kill myself', 'suicide', 'want to die', 'hurt myself', 'end my life', 
                'рдорд░рдирд╛ рдЪрд╛рд╣рддрд╛', 'рдЖрддреНрдорд╣рддреНрдпрд╛', 'рдЬрд┐рдВрджрдЧреА рдЦрддреНрдо']
    moderate_risk = ['hopeless', 'worthless', 'alone', 'depressed', 'overwhelming',
                    'рдирд┐рд░рд╛рд╢рд╛', 'рдмреЗрдХрд╛рд░', 'рдЕрдХреЗрд▓рд╛', 'рд╣рд╛рд░ рдЧрдпрд╛']
    
    for phrase in high_risk:
        if phrase in text_lower:
            return 'high'
    
    for phrase in moderate_risk:
        if phrase in text_lower:
            return 'moderate'
    
    return 'low'

def get_response(message, language):
    """Get appropriate response based on message and language"""
    crisis_level = assess_crisis_level(message)
    is_crisis = crisis_level in ['moderate', 'high']
    
    responses = fallback_responses.get(language, fallback_responses['en'])
    response_list = responses.get(crisis_level, responses['low'])
    response = random.choice(response_list)
    
    return {'message': response, 'is_crisis': is_crisis, 'language': language}

@app.route('/')
def index():
    return {"status": "Mental Health Chatbot Server - FIXED VERSION", "language_support": True}

@socketio.on('connect')
def on_connect():
    print("ЁЯФМ Client connected")
    welcome_msg = "Hello! I'm your AI mental health assistant. How can I help you today?"
    emit('ai response', {'message': welcome_msg, 'is_crisis': False, 'language': 'en'})

@socketio.on('chat message')
def on_message(data):
    """ЁЯФе MAIN FIX: Handle language parameter from frontend"""
    user_message = data.get('message', '').strip()
    user_language = data.get('language', 'en')  # ЁЯФе KEY FIX: Get language from website!
    
    print(f"ЁЯУи Message: '{user_message[:40]}...' Language: {user_language}")
    
    if not user_message:
        empty_responses = {
            'en': "Please enter a message to get started.",
            'hi': "рдХреГрдкрдпрд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдВрджреЗрд╢ рджрд░реНрдЬ рдХрд░реЗрдВред"
        }
        emit('ai response', {
            'message': empty_responses.get(user_language, empty_responses['en']),
            'is_crisis': False,
            'language': user_language
        })
        return
    
    # Generate response in target language
    result = get_response(user_message, user_language)
    
    print(f"ЁЯдЦ Response: '{result['message'][:40]}...' Crisis: {result['is_crisis']}")
    
    emit('ai response', {
        'message': result['message'],
        'is_crisis': result['is_crisis'],
        'language': user_language
    })

@socketio.on('disconnect')
def on_disconnect():
    print("ЁЯФМ Client disconnected")

if __name__ == '__main__':
    print("ЁЯЪА Starting FIXED Mental Health Chatbot Server...")
    print("ЁЯМР Server URL: http://localhost:3000")
    print("тЬЕ Now properly handles language parameter from frontend!")
    print("тЬЕ No more mixed character responses!")
    socketio.run(app, host='localhost', port=3000, debug=True)